#include <string>
#include <assert.h>
#include "cache.h"
#include "prefetcher.h"
#include "sms.h"
#include "spp.h"
#include "scooby.h"
#include "next_line.h"
#include "bop.h"

using namespace std;

namespace knob
{
	extern vector<string> l2c_prefetcher_types;
}

vector<Prefetcher*> prefetchers;

void CACHE::l2c_prefetcher_initialize() 
{
	for(uint32_t index = 0; index < knob::l2c_prefetcher_types.size(); ++index)
	{
		if(!knob::l2c_prefetcher_types[index].compare("none"))
		{
			cout << "adding L2C_PREFETCHER: NONE" << endl;
		}
		else if(!knob::l2c_prefetcher_types[index].compare("sms"))
		{
			cout << "adding L2C_PREFETCHER: SMS" << endl;
			SMSPrefetcher *pref_sms = new SMSPrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_sms);
		}
		else if(!knob::l2c_prefetcher_types[index].compare("spp"))
		{
			cout << "adding L2C_PREFETCHER: SPP" << endl;
			SPP *pref_spp = new SPP(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_spp);
		}
		else if(!knob::l2c_prefetcher_types[index].compare("bop"))
		{
			cout << "adding L2C_PREFETCHER: BOP" << endl;
			BOPrefetcher *pref_bop = new BOPrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_bop);
		}
		else if(!knob::l2c_prefetcher_types[index].compare("scooby"))
		{
			cout << "adding L2C_PREFETCHER: Scooby" << endl;
			Scooby *pref_scooby = new Scooby(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_scooby);
		}
		else if(!knob::l2c_prefetcher_types[index].compare("next_line"))
		{
			cout << "adding L2C_PREFETCHER: next_line" << endl;
			NextLinePrefetcher *pref_nl = new NextLinePrefetcher(knob::l2c_prefetcher_types[index]);
			prefetchers.push_back(pref_nl);
		}
		else
		{
			cout << "unsupported prefetcher type " << knob::l2c_prefetcher_types[index] << endl;
			exit(1);
		}
	}

	assert(knob::l2c_prefetcher_types.size() == prefetchers.size());
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
	vector<uint64_t> pref_addr;
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{
			prefetchers[index]->invoke_prefetcher(ip, addr, cache_hit, type, pref_addr);
			if(!pref_addr.empty())
			{
				for(uint32_t addr_index = 0; addr_index < pref_addr.size(); ++addr_index)
				{
					prefetch_line(ip, addr, pref_addr[addr_index], FILL_L2, 0);
				}
			}
			pref_addr.clear();
	}

	return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
	if(prefetch)
	{
		for(uint32_t index = 0; index < prefetchers.size(); ++index)
		{
			if(!prefetchers[index]->get_type().compare("scooby"))
			{
				Scooby *pref_scooby = (Scooby*)prefetchers[index];
				pref_scooby->register_fill(addr);
			}
			if(!prefetchers[index]->get_type().compare("next_line"))
			{
				NextLinePrefetcher *pref_nl = (NextLinePrefetcher*)prefetchers[index];
				pref_nl->register_fill(addr);
			}
			if(!prefetchers[index]->get_type().compare("bop"))
			{
				BOPrefetcher *pref_bop = (BOPrefetcher*)prefetchers[index];
				pref_bop->register_fill(addr);
			}
		}
	}

	return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_prefetch_hit(uint64_t addr, uint64_t ip, uint32_t metadata_in)
{
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		if(!prefetchers[index]->get_type().compare("scooby"))
		{
			Scooby *pref_scooby = (Scooby*)prefetchers[index];
			pref_scooby->register_prefetch_hit(addr);
		}
	}
	
    return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		prefetchers[index]->dump_stats();
	}	
}

void CACHE::l2c_prefetcher_print_config()
{
	for(uint32_t index = 0; index < prefetchers.size(); ++index)
	{
		prefetchers[index]->print_config();
	}		
}
